// Generated by CoffeeScript 1.4.0
(function() {
  var Base, Keyboard, Program, Ui, fs, program,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  program = require('commander');

  Ui = require('./Ui').Ui;

  Base = require('./Base').Base;

  Keyboard = require('./Keyboard').Keyboard;

  Program = (function(_super) {

    __extends(Program, _super);

    function Program(options) {
      var _base, _ref;
      this.options = options != null ? options : {};
      this.run = __bind(this.run, this);

      this.close = __bind(this.close, this);

      this.setupHandlers = __bind(this.setupHandlers, this);

      this.initUi = __bind(this.initUi, this);

      this.initKeyboard = __bind(this.initKeyboard, this);

      this.initXbmc = __bind(this.initXbmc, this);

      this.parseOptions = __bind(this.parseOptions, this);

      this.initCommander = __bind(this.initCommander, this);

      if ((_ref = (_base = this.options).name) == null) {
        _base.name = 'xbmc-remote-keyboard';
      }
      this.initCommander();
      return this;
    }

    Program.prototype.initCommander = function() {
      program.name = this.options.name;
      return program.version(Program.getVersion()).usage('[options] hostname/ip[:port]').option('-v, --verbose', 'verbose').option('-d, --debug', 'debug').option('-s, --silent', 'do not send message on connection').option('-a, --agent <agent>', 'user agent');
    };

    Program.prototype.parseOptions = function() {
      var _base, _ref, _ref1;
      program.parse(process.argv);
      __extends(this.options, program);
      _ref = this.options.args[0].split(':'), this.options.host = _ref[0], this.options.port = _ref[1];
      if ((_ref1 = (_base = this.options).host) == null) {
        _base.host = '127.0.0.1';
      }
      this.options.port = parseInt(this.options.port) || 9090;
      return this.log(this.options.args);
    };

    Program.prototype.initXbmc = function(fn) {
      var TCPConnection, XbmcApi, _ref;
      if (fn == null) {
        fn = null;
      }
      _ref = require('xbmc'), TCPConnection = _ref.TCPConnection, XbmcApi = _ref.XbmcApi;
      this.xbmcConnection = new TCPConnection({
        host: this.options.host,
        port: this.options.port,
        verbose: this.options.debug
      });
      this.xbmcApi = new XbmcApi({
        connection: this.xbmcConnection,
        verbose: this.options.debug,
        agent: this.options.agent || 'Remote Keyboard',
        silent: this.options.silent
      });
      this.xbmcApi.on('connection:open', function() {
        if (fn) {
          return fn(false);
        }
      });
      return this.xbmcApi.on('connection:error', function() {
        if (fn) {
          return fn(true);
        }
      });
    };

    Program.prototype.initKeyboard = function(fn) {
      if (fn == null) {
        fn = null;
      }
      this.keyboard = new Keyboard(this.options);
      this.keyboard.start();
      if (fn) {
        return fn(false);
      }
    };

    Program.prototype.initUi = function(fn) {
      if (fn == null) {
        fn = null;
      }
      this.ui = new Ui(this.options);
      this.ui.start();
      if (fn) {
        return fn(false);
      }
    };

    Program.prototype.setupHandlers = function() {
      var _this = this;
      this.ui.on('input', function(c, i) {
        return _this.keyboard.emit('input', c, i);
      });
      this.keyboard.on('quit', function() {
        return _this.close();
      });
      this.keyboard.on('apiSendInput', function(method, args) {
        if (args == null) {
          args = null;
        }
        return _this.xbmcApi.input[method](args);
      });
      return this.keyboard.on('unknownInput', function(c, i) {
        return _this.log("Unknown input", c, i);
      });
    };

    Program.prototype.close = function() {
      this.log("closing");
      this.ui.close();
      return process.exit(0);
    };

    Program.prototype.run = function() {
      var _this = this;
      this.parseOptions();
      return this.initXbmc(function(err) {
        return _this.initUi(function(err) {
          return _this.initKeyboard(function(err) {
            return _this.setupHandlers();
          });
        });
      });
    };

    Program.getVersion = function() {
      return JSON.parse(fs.readFileSync("" + __dirname + "/../package.json", 'utf8')).version;
    };

    Program.create = function(options) {
      if (options == null) {
        options = {};
      }
      return new Program(options);
    };

    Program.run = function() {
      return (Program.create()).run();
    };

    return Program;

  })(Base);

  module.exports = {
    Program: Program,
    run: Program.run,
    create: Program.create,
    getVersion: Program.getVersion
  };

}).call(this);
